/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { getMouseDegrees } from "../../singleComponents/Utils/Utils";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";

function moveJoint(mouse, joint, degreeLimit = 40) {
  let degrees = getMouseDegrees(mouse.x, mouse.y * 2, degreeLimit);
  joint.rotation.xD = THREE.MathUtils.lerp(
    joint.rotation.xD || 0,
    degrees.y,
    0.1
  );
  joint.rotation.yD = THREE.MathUtils.lerp(
    joint.rotation.yD || 0,
    degrees.x,
    0.1
  );

  joint.rotation.x = THREE.MathUtils.degToRad(joint.rotation.xD);
  joint.rotation.y = THREE.MathUtils.degToRad(joint.rotation.yD);
}

export default function Kae({ ...props }) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/kae_v07.glb");
  const [mixer] = useState(() => new THREE.AnimationMixer());
  useFrame((state, delta) => mixer.update(delta));

  console.log(nodes);

  const { size } = useThree();
  useFrame((state, delta) => {
    const mouse = {
      x: size.width / 2 + (state.mouse.x * size.width) / 2,
      y: size.height / 2 + (-state.mouse.y * size.height) / 2,
    };
    mixer.update(delta);
    moveJoint(mouse, nodes.forearmL, 50);
    moveJoint(mouse, nodes.forearmR, 50);
    moveJoint(mouse, nodes.spine002, 10);
    moveJoint(mouse, nodes.spine003, 10);
    moveJoint(mouse, nodes.spine004, 10);
    moveJoint(mouse, nodes.spine005, 10);
    moveJoint(mouse, nodes.spine006, 10);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[-0.03, -2, 0]} rotation={[0, 0, -0.01]} scale={2}>
        <primitive object={nodes.spine} />
        <skinnedMesh
          name="Kae_Body_Low"
          geometry={nodes.Kae_Body_Low.geometry}
          material={materials.kae}
          skeleton={nodes.Kae_Body_Low.skeleton}
          morphTargetDictionary={nodes.Kae_Body_Low.morphTargetDictionary}
          morphTargetInfluences={nodes.Kae_Body_Low.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/kae_v07.glb");
